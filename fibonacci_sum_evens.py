# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
# $$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$. By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
# find the sum of the even-valued terms.

def sum_even_fibonacci(upper_bound: int) -> int:
    """Sum of even Fibonacci numbers.
    Args:
        upper_bound (int)
    
    Returns:
        Sum of even Fibonacci number (int)
        
    Usage examples:
    >>> sum_even_fibonacci(upper_bound=1)
    0
    >>> sum_even_fibonacci(upper_bound=2)
    2
    >>> sum_even_fibonacci(upper_bound=10)
    10
    >>> sum_even_fibonacci(upper_bound=35)
    44"""
    if upper_bound <= 0:
        raise ValueError("upper bound cannot be zero or negative.")
    sum_ = 0
    fib = [0, 1]
    while fib[-1] <= upper_bound:
        last_num = fib[-1] + fib[-2]
        if fib[-1] % 2 == 0:
            sum_ += fib[-1]
        fib.append(last_num)
    return sum_

if __name__ == '__main__':
    import doctest
    doctest.testmod()
    
    print(sum_even_fibonacci(upper_bound=4_000_000))